from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from config import TOKEN
from dataBase import SQLighter
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton



keyboard= types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ['–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è']
keyboard.add(*buttons)



bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
db = SQLighter('db.db')

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id,f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.username}")
    await bot.send_message(message.from_user.id,"–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",reply_markup=keyboard)



@dp.message_handler(text="–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def process_start_command(message: types.Message):
    await message.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, —Ç–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤–∫—É—Å–Ω–æ—Ç—É üòã")

    if(not db.subs_exists(message.from_user.id)):
        db.add_subs(message.from_user.id,message.from_user.username)
        #db.take_name(message.from_user.username)
    else:
        db.update_subs(message.from_user.id, True)

@dp.message_handler(text='–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è')
async def process_start_command(message: types.Message):
        db.update_subs(message.from_user.id, False)
        await message.answer('–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è, –Ω–µ –≤–∏–¥–∞—Ç—å —Ç–µ–±–µ –±–æ–ª—å—à–µ –ª–∞–ø—à–∏ ü§®')

@dp.message_handler(text='–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
async def process_start_command(message: types.Message):
        await bot.send_message(message.from_user.id, '–ü—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã "/offer (—Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫–∞)" –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—à—É –º–æ—Ç–∏–≤–∞—à–∫—É, —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–æ—á–µ–µ, –µ—ë –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞')
        await bot.send_message(message.from_user.id, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏')

@dp.message_handler(commands=['send1430019068'])
async def process_start_command(message: types.Message):
    subscriptions = db.get_subscriptions()
    msg=message.text
    msg= msg[16:]
    print(msg)
    print(subscriptions)
    for s in subscriptions:
        await bot.send_photo(s[1], photo=msg)

@dp.message_handler(commands=['sendtxt1430019068'])
async def process_start_command(message: types.Message):
    subscriptions = db.get_subscriptions()
    msg=message.text
    msg=msg[18:]
    print(msg)
    print(subscriptions)
    for s in subscriptions:
        await bot.send_message(s[1], msg)


@dp.message_handler(commands=['db1430019068'])
async def process_start_command(message: types.Message):
    subscriptions = db.get_subscriptions()
    await bot.send_message('1430019068', subscriptions)


@dp.message_handler(commands=['offer'])
async def process_start_command(message: types.Message):
    if len(message.text)<=6:
        await bot.send_message(message.from_user.id, '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ —Ñ–æ—Ä–º–µ "/offer (—Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫–∞)"')
    else:
        await bot.send_message('1430019068',message.from_user.username)
        await bot.send_message('1430019068', message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')





if __name__ == '__main__':
    executor.start_polling(dp)